<?php

// Define constants
define('ALOHA_PATH', 'sites/all/libraries/aloha');

/**
 * Implements hook_permission().
 */
function aloha_permission() {
  return array(
    'use aloha' => array(
      'title' => t('Use the aloha editor'),
      'description' => t('Use the aloha editor to edit node content.')
    ));
}

/**
 * Implements hook_field_attach_view_alter().
 */
function aloha_field_attach_view_alter(&$output, $context) {
  if(user_access('use aloha') && node_access('update', $node)){
    $id = &drupal_static(__FUNCTION__);
    if (!$id) {
      $id = 0;
    }
    if ($context['entity_type'] == 'node') {
      if (isset($output['body']) && $output['body']['#formatter'] == 'text_default') {
        if (_aloha_include_files()) {
          // Pass the body language in settings
          $setting = array(
            '#aloha-container-' . $id => array(
              'nid' => $context['entity']->nid,
              'lang' => $output['body']['#language'],
            )
          );
          drupal_add_js(array('aloha' => array('nodes' => $setting)), 'setting');
          // Add a wrapper
          $output['body'][0]['#prefix'] = '<div id="aloha-container-' . $id . '" class="aloha-editor">';
          $output['body'][0]['#suffix'] = '</div>';
          $id++;
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function aloha_menu() {
  $items['node/%node/aloha/save'] = array(
    'title' => 'Save node content',
    'page callback' => 'aloha_save_node',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Helper function to add JS files and setings
 */
function _aloha_include_files() {
  $included = &drupal_static(__FUNCTION__);
  if (!$included) {
    $path = ALOHA_PATH;
    if (!file_exists($path . '/aloha.js')) {
      // Display a message when aloha is not found
      drupal_set_message(t('You need to download the !aloha and extract the entire contents of the archive into the %path folder of your server.', array('!aloha' => l(t('Aloha Editor'), 'http://www.aloha-editor.org/'), '%path' => $path)), 'warning', FALSE);
      return FALSE;
    }
    global $base_url;
    $js_settings = array('preprocess' => false);
    drupal_add_js($path . '/aloha.js', $js_settings);
    drupal_add_js($path . '/plugins/com.gentics.aloha.plugins.Format/plugin.js', $js_settings);
    drupal_add_js($path . '/plugins/com.gentics.aloha.plugins.Table/plugin.js', $js_settings);
    drupal_add_js($path . '/plugins/com.gentics.aloha.plugins.List/plugin.js', $js_settings);
    drupal_add_js($path . '/plugins/com.gentics.aloha.plugins.Link/plugin.js', $js_settings);
    drupal_add_css($path . '/aloha/css/aloha.css');

    // Module files
    drupal_add_js(drupal_get_path('module', 'aloha') . '/aloha.js');
    drupal_add_css(drupal_get_path('module', 'aloha') . '/aloha.css');
    
    // Clean URLs on?
    $cleanurls = strstr($_SERVER['REQUEST_URI'], '?q=') ? FALSE : TRUE;
    drupal_add_js(array('aloha' => array('cleanurls' => $cleanurls)), 'setting');
    
    // Aloha Settings
    $settings = array(
      'logLevels' => array(
        'error' => TRUE,
        'warn' => TRUE,
        'info' => FALSE,
        'debug' => FALSE,
      ),
      'errorhandling' => FALSE,
      'ribbon' => FALSE,
      'i18n' => array(
        'acceptLanguage' => $_SERVER['HTTP_ACCEPT_LANGUAGE']
      ),
      'plugins' => array(
        'com.gentics.aloha.plugins.Link' => array(
          'targetregex' => "^(?!.*" . $base_url . ").*",
          'target' => '_blank',
          'cssclassregex' => "^(?!.*" . $base_url . ").*",
          'cssclass' => 'external',
        ),
        'com.gentics.aloha.plugins.Table' => array(
          'config' => array('table'),
        ),
      ),
    );
    drupal_add_js(array('aloha' => array('alohaSettings' => $settings)), 'setting');
    $included = TRUE;
  }
  return TRUE;
}

/**
 * AJaX Callback for saving node
 *
 * @param $node
 */
function aloha_save_node($node) {
  // Prevent direct access without POST
  if (isset($_POST['body'])) {
    $node->body[$_POST['lang']][0]['value'] = $_POST['body'];
    node_save($node);
    $saved = array('title' => $node->title, 'status' => 'saved', 'nid' => $node->nid);
    return drupal_json_output($saved);
  }
  else {
    drupal_json_output(FALSE);
  }
}
